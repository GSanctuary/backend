datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
}

model User {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  apiKey          String           @unique
  AIConversations AIConversation[]
  Recipes         Recipe[]
  Task            Task[]
  StickyNotes     StickyNote[]
  Rooms           Room[]
}

model AIConversation {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  roomId    Int
  room      Room        @relation(fields: [roomId], references: [id])
  title     String
  AIMessage AIMessage[]
}

model AIMessage {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  conversationId Int
  prompt         String
  response       String
  conversation   AIConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Recipe {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  roomId      Int
  room        Room     @relation(fields: [roomId], references: [id])
  name        String
  ingredients String[]
  steps       String[]
  description String?
}

model Task {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  name      String
  completed Boolean  @default(false)
}

model StickyNote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  content   String
  metadata  Json
}

model Room {
  id             Int              @id @default(autoincrement())
  anchorId       String           @unique
  positionX      Float
  positionY      Float
  positionZ      Float
  userId         Int
  user           User             @relation(fields: [userId], references: [id])
  scaleX         Float
  scaleZ         Float
  rotation       Float
  name           String           @unique
  AIConversation AIConversation[]
  Recipe         Recipe[]
  Task           Task[]
  StickyNote     StickyNote[]
}
